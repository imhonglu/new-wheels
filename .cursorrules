# New Wheels Project Coding Convention

## Project Structure
- Monorepo structure using pnpm workspace
- apps/: Application code
- libs/: Shared library code
- tools/: Development tools and scripts
- .github/: CI/CD and GitHub workflows
- .vscode/: Editor settings and extensions

## Code Style
- TypeScript as the primary language
- Functional programming patterns preferred
- Functions and objects over classes
- Emphasis on modularity and reusability
- Clear variable naming (isLoading, hasError, etc.)

## File Structure
- Components: components/[feature-name]/
- Utilities: utils/[category]/
- Types: types/[domain]/
- Constants: constants/[domain]/

## TypeScript Guidelines
- Prefer interfaces over types
- Use const maps instead of enums
- Apply TypeScript interfaces to functional components
- Leverage generics for type safety

## Naming Conventions
- Directories: kebab-case (e.g., auth-wizard)
- Components: PascalCase
- Functions: camelCase
- Constants: UPPER_SNAKE_CASE
- Types/Interfaces: PascalCase

## Documentation
- Use TypeDoc
- All documentation in English
- JSDoc comments required for major functions and components
- Maintain both README.md and README_KR.md

## Code Quality
- Code formatting with Biome
- Git hooks management with Husky
- Version management with Changesets
- Commit message validation with Commitlint
- Spell checking with cspell
- Editor configuration with .editorconfig

## Testing
- Unit testing with Vitest
- Test files follow *.test.ts pattern
- Maintain test coverage
- Test environment configuration in vitest.workspace.js

## Development Environment
- Node.js version management with .tool-versions
- Editor settings in .vscode/settings.json
- Git configuration in .gitattributes
- License and legal information in LICENSE