/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../schema.js";
describe("maximum validation", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    maximum: 3,
  };
  test("below the maximum is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(2.6)).toBeTruthy();
  });
  test("boundary point is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(3)).toBeTruthy();
  });
  test("above the maximum is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(3.5)).toBeFalsy();
  });
  test("ignores non-numbers", () => {
    const instance = new Schema(schema);
    expect(instance.validate("x")).toBeTruthy();
  });
});
describe("maximum validation with unsigned integer", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    maximum: 300,
  };
  test("below the maximum is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(299.97)).toBeTruthy();
  });
  test("boundary point integer is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(300)).toBeTruthy();
  });
  test("boundary point float is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(300)).toBeTruthy();
  });
  test("above the maximum is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(300.5)).toBeFalsy();
  });
});
