/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../schema.js";
describe("anyOf", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    anyOf: [{ type: "integer" }, { minimum: 2 }],
  };
  test("first anyOf valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(1)).toBeTruthy();
  });
  test("second anyOf valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(2.5)).toBeTruthy();
  });
  test("both anyOf valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(3)).toBeTruthy();
  });
  test("neither anyOf valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(1.5)).toBeFalsy();
  });
});
describe("anyOf with base schema", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    type: "string",
    anyOf: [{ maxLength: 2 }, { minLength: 4 }],
  };
  test("mismatch base schema", () => {
    const instance = new Schema(schema);
    expect(instance.validate(3)).toBeFalsy();
  });
  test("one anyOf valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate("foobar")).toBeTruthy();
  });
  test("both anyOf invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate("foo")).toBeFalsy();
  });
});
describe("anyOf with boolean schemas, all true", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    anyOf: [true, true],
  };
  test("any value is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate("foo")).toBeTruthy();
  });
});
describe("anyOf with boolean schemas, some true", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    anyOf: [true, false],
  };
  test("any value is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate("foo")).toBeTruthy();
  });
});
describe("anyOf with boolean schemas, all false", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    anyOf: [false, false],
  };
  test("any value is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate("foo")).toBeFalsy();
  });
});
describe("anyOf complex types", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    anyOf: [
      { properties: { bar: { type: "integer" } }, required: ["bar"] },
      { properties: { foo: { type: "string" } }, required: ["foo"] },
    ],
  };
  test("first anyOf valid (complex)", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ bar: 2 })).toBeTruthy();
  });
  test("second anyOf valid (complex)", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ foo: "baz" })).toBeTruthy();
  });
  test("both anyOf valid (complex)", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ foo: "baz", bar: 2 })).toBeTruthy();
  });
  test("neither anyOf valid (complex)", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ foo: 2, bar: "quux" })).toBeFalsy();
  });
});
describe("anyOf with one empty schema", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    anyOf: [{ type: "number" }, {}],
  };
  test("string is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate("foo")).toBeTruthy();
  });
  test("number is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(123)).toBeTruthy();
  });
});
describe("nested anyOf, to check validation semantics", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    anyOf: [{ anyOf: [{ type: "null" }] }],
  };
  test("null is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(null)).toBeTruthy();
  });
  test("anything non-null is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(123)).toBeFalsy();
  });
});
