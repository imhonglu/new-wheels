/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../schema.js";
describe("a schema given for items", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    items: { type: "integer" },
  };
  test("valid items", () => {
    const instance = new Schema(schema);
    expect(instance.validate([1, 2, 3])).toBeTruthy();
  });
  test("wrong type of items", () => {
    const instance = new Schema(schema);
    expect(instance.validate([1, "x"])).toBeFalsy();
  });
  test("ignores non-arrays", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ foo: "bar" })).toBeTruthy();
  });
  test("JavaScript pseudo-array is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ "0": "invalid", length: 1 })).toBeTruthy();
  });
});
describe("items with boolean schema (true)", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    items: true,
  };
  test("any array is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([1, "foo", true])).toBeTruthy();
  });
  test("empty array is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([])).toBeTruthy();
  });
});
describe("items with boolean schema (false)", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    items: false,
  };
  test("any non-empty array is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([1, "foo", true])).toBeFalsy();
  });
  test("empty array is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([])).toBeTruthy();
  });
});
describe("items and subitems", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    $defs: {
      item: {
        type: "array",
        items: false,
        prefixItems: [
          { $ref: "#/$defs/sub-item" },
          { $ref: "#/$defs/sub-item" },
        ],
      },
      "sub-item": { type: "object", required: ["foo"] },
    },
    type: "array",
    items: false,
    prefixItems: [
      { $ref: "#/$defs/item" },
      { $ref: "#/$defs/item" },
      { $ref: "#/$defs/item" },
    ],
  };
  test("valid items", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate([
        [{ foo: null }, { foo: null }],
        [{ foo: null }, { foo: null }],
        [{ foo: null }, { foo: null }],
      ]),
    ).toBeTruthy();
  });
  test("too many items", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate([
        [{ foo: null }, { foo: null }],
        [{ foo: null }, { foo: null }],
        [{ foo: null }, { foo: null }],
        [{ foo: null }, { foo: null }],
      ]),
    ).toBeFalsy();
  });
  test("too many sub-items", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate([
        [{ foo: null }, { foo: null }, { foo: null }],
        [{ foo: null }, { foo: null }],
        [{ foo: null }, { foo: null }],
      ]),
    ).toBeFalsy();
  });
  test("wrong item", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate([
        { foo: null },
        [{ foo: null }, { foo: null }],
        [{ foo: null }, { foo: null }],
      ]),
    ).toBeFalsy();
  });
  test("wrong sub-item", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate([
        [{}, { foo: null }],
        [{ foo: null }, { foo: null }],
        [{ foo: null }, { foo: null }],
      ]),
    ).toBeFalsy();
  });
  test("fewer items is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([[{ foo: null }], [{ foo: null }]])).toBeTruthy();
  });
});
describe("nested items", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    type: "array",
    items: {
      type: "array",
      items: {
        type: "array",
        items: { type: "array", items: { type: "number" } },
      },
    },
  };
  test("valid nested array", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate([[[[1]], [[2], [3]]], [[[4], [5], [6]]]]),
    ).toBeTruthy();
  });
  test("nested array with invalid type", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate([[[["1"]], [[2], [3]]], [[[4], [5], [6]]]]),
    ).toBeFalsy();
  });
  test("not deep enough", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate([
        [[1], [2], [3]],
        [[4], [5], [6]],
      ]),
    ).toBeFalsy();
  });
});
describe("prefixItems with no additional items allowed", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    prefixItems: [{}, {}, {}],
    items: false,
  };
  test("empty array", () => {
    const instance = new Schema(schema);
    expect(instance.validate([])).toBeTruthy();
  });
  test("fewer number of items present (1)", () => {
    const instance = new Schema(schema);
    expect(instance.validate([1])).toBeTruthy();
  });
  test("fewer number of items present (2)", () => {
    const instance = new Schema(schema);
    expect(instance.validate([1, 2])).toBeTruthy();
  });
  test("equal number of items present", () => {
    const instance = new Schema(schema);
    expect(instance.validate([1, 2, 3])).toBeTruthy();
  });
  test("additional items are not permitted", () => {
    const instance = new Schema(schema);
    expect(instance.validate([1, 2, 3, 4])).toBeFalsy();
  });
});
describe("items does not look in applicators, valid case", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    allOf: [{ prefixItems: [{ minimum: 3 }] }],
    items: { minimum: 5 },
  };
  test("prefixItems in allOf does not constrain items, invalid case", () => {
    const instance = new Schema(schema);
    expect(instance.validate([3, 5])).toBeFalsy();
  });
  test("prefixItems in allOf does not constrain items, valid case", () => {
    const instance = new Schema(schema);
    expect(instance.validate([5, 5])).toBeTruthy();
  });
});
describe("prefixItems validation adjusts the starting index for items", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    prefixItems: [{ type: "string" }],
    items: { type: "integer" },
  };
  test("valid items", () => {
    const instance = new Schema(schema);
    expect(instance.validate(["x", 2, 3])).toBeTruthy();
  });
  test("wrong type of second item", () => {
    const instance = new Schema(schema);
    expect(instance.validate(["x", "y"])).toBeFalsy();
  });
});
describe("items with heterogeneous array", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    prefixItems: [{}],
    items: false,
  };
  test("heterogeneous invalid instance", () => {
    const instance = new Schema(schema);
    expect(instance.validate(["foo", "bar", 37])).toBeFalsy();
  });
  test("valid instance", () => {
    const instance = new Schema(schema);
    expect(instance.validate([null])).toBeTruthy();
  });
});
describe("items with null instance elements", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    items: { type: "null" },
  };
  test("allows null elements", () => {
    const instance = new Schema(schema);
    expect(instance.validate([null])).toBeTruthy();
  });
});
