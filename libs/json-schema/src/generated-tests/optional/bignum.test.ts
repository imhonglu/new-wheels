/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../../schema.js";
describe("integer", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    type: "integer",
  };
  test("a bignum is an integer", () => {
    const instance = new Schema(schema);
    expect(instance.validate(1.2345678910111214e52)).toBeTruthy();
  });
  test("a negative bignum is an integer", () => {
    const instance = new Schema(schema);
    expect(instance.validate(-1.2345678910111214e52)).toBeTruthy();
  });
});
describe("number", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    type: "number",
  };
  test("a bignum is a number", () => {
    const instance = new Schema(schema);
    expect(instance.validate(9.824928374923492e52)).toBeTruthy();
  });
  test("a negative bignum is a number", () => {
    const instance = new Schema(schema);
    expect(instance.validate(-9.824928374923492e52)).toBeTruthy();
  });
});
describe("string", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    type: "string",
  };
  test("a bignum is not a string", () => {
    const instance = new Schema(schema);
    expect(instance.validate(9.824928374923492e52)).toBeFalsy();
  });
});
describe("maximum integer comparison", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    maximum: 18446744073709552000,
  };
  test("comparison works for high numbers", () => {
    const instance = new Schema(schema);
    expect(instance.validate(18446744073709552000)).toBeTruthy();
  });
});
describe("float comparison with high precision", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    exclusiveMaximum: 9.727837981879871e26,
  };
  test("comparison works for high numbers", () => {
    const instance = new Schema(schema);
    expect(instance.validate(9.727837981879871e26)).toBeFalsy();
  });
});
describe("minimum integer comparison", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    minimum: -18446744073709552000,
  };
  test("comparison works for very negative numbers", () => {
    const instance = new Schema(schema);
    expect(instance.validate(-18446744073709552000)).toBeTruthy();
  });
});
describe("float comparison with high precision on negative numbers", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    exclusiveMinimum: -9.727837981879871e26,
  };
  test("comparison works for very negative numbers", () => {
    const instance = new Schema(schema);
    expect(instance.validate(-9.727837981879871e26)).toBeFalsy();
  });
});
