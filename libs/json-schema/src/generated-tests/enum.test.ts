/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../schema.js";
describe("simple enum validation", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    enum: [1, 2, 3],
  };
  test("one of the enum is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(1)).toBeTruthy();
  });
  test("something else is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(4)).toBeFalsy();
  });
});
describe("heterogeneous enum validation", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    enum: [6, "foo", [], true, { foo: 12 }],
  };
  test("one of the enum is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([])).toBeTruthy();
  });
  test("something else is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(null)).toBeFalsy();
  });
  test("objects are deep compared", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ foo: false })).toBeFalsy();
  });
  test("valid object matches", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ foo: 12 })).toBeTruthy();
  });
  test("extra properties in object is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ foo: 12, boo: 42 })).toBeFalsy();
  });
});
describe("heterogeneous enum-with-null validation", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    enum: [6, null],
  };
  test("null is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(null)).toBeTruthy();
  });
  test("number is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(6)).toBeTruthy();
  });
  test("something else is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate("test")).toBeFalsy();
  });
});
describe("enums in properties", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    type: "object",
    properties: { foo: { enum: ["foo"] }, bar: { enum: ["bar"] } },
    required: ["bar"],
  };
  test("both properties are valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ foo: "foo", bar: "bar" })).toBeTruthy();
  });
  test("wrong foo value", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ foo: "foot", bar: "bar" })).toBeFalsy();
  });
  test("wrong bar value", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ foo: "foo", bar: "bart" })).toBeFalsy();
  });
  test("missing optional property is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ bar: "bar" })).toBeTruthy();
  });
  test("missing required property is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ foo: "foo" })).toBeFalsy();
  });
  test("missing all properties is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate({})).toBeFalsy();
  });
});
describe("enum with escaped characters", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    enum: ["foo\nbar", "foo\rbar"],
  };
  test("member 1 is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate("foo\nbar")).toBeTruthy();
  });
  test("member 2 is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate("foo\rbar")).toBeTruthy();
  });
  test("another string is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate("abc")).toBeFalsy();
  });
});
describe("enum with false does not match 0", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    enum: [false],
  };
  test("false is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(false)).toBeTruthy();
  });
  test("integer zero is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(0)).toBeFalsy();
  });
  test("float zero is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(0)).toBeFalsy();
  });
});
describe("enum with [false] does not match [0]", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    enum: [[false]],
  };
  test("[false] is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([false])).toBeTruthy();
  });
  test("[0] is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([0])).toBeFalsy();
  });
  test("[0.0] is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([0])).toBeFalsy();
  });
});
describe("enum with true does not match 1", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    enum: [true],
  };
  test("true is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(true)).toBeTruthy();
  });
  test("integer one is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(1)).toBeFalsy();
  });
  test("float one is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(1)).toBeFalsy();
  });
});
describe("enum with [true] does not match [1]", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    enum: [[true]],
  };
  test("[true] is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([true])).toBeTruthy();
  });
  test("[1] is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([1])).toBeFalsy();
  });
  test("[1.0] is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([1])).toBeFalsy();
  });
});
describe("enum with 0 does not match false", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    enum: [0],
  };
  test("false is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(false)).toBeFalsy();
  });
  test("integer zero is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(0)).toBeTruthy();
  });
  test("float zero is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(0)).toBeTruthy();
  });
});
describe("enum with [0] does not match [false]", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    enum: [[0]],
  };
  test("[false] is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([false])).toBeFalsy();
  });
  test("[0] is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([0])).toBeTruthy();
  });
  test("[0.0] is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([0])).toBeTruthy();
  });
});
describe("enum with 1 does not match true", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    enum: [1],
  };
  test("true is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(true)).toBeFalsy();
  });
  test("integer one is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(1)).toBeTruthy();
  });
  test("float one is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate(1)).toBeTruthy();
  });
});
describe("enum with [1] does not match [true]", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    enum: [[1]],
  };
  test("[true] is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([true])).toBeFalsy();
  });
  test("[1] is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([1])).toBeTruthy();
  });
  test("[1.0] is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate([1])).toBeTruthy();
  });
});
describe("nul characters in strings", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    enum: ["hello\0there"],
  };
  test("match string with nul", () => {
    const instance = new Schema(schema);
    expect(instance.validate("hello\0there")).toBeTruthy();
  });
  test("do not match string lacking nul", () => {
    const instance = new Schema(schema);
    expect(instance.validate("hellothere")).toBeFalsy();
  });
});
