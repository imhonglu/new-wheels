/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../schema.js";
describe("required validation", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    properties: { foo: {}, bar: {} },
    required: ["foo"],
  };
  test("present required property is valid", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ foo: 1 })).toBeTruthy();
  });
  test("non-present required property is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ bar: 1 })).toBeFalsy();
  });
  test("ignores arrays", () => {
    const instance = new Schema(schema);
    expect(instance.validate([])).toBeTruthy();
  });
  test("ignores strings", () => {
    const instance = new Schema(schema);
    expect(instance.validate("")).toBeTruthy();
  });
  test("ignores other non-objects", () => {
    const instance = new Schema(schema);
    expect(instance.validate(12)).toBeTruthy();
  });
});
describe("required default validation", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    properties: { foo: {} },
  };
  test("not required by default", () => {
    const instance = new Schema(schema);
    expect(instance.validate({})).toBeTruthy();
  });
});
describe("required with empty array", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    properties: { foo: {} },
    required: [],
  };
  test("property not required", () => {
    const instance = new Schema(schema);
    expect(instance.validate({})).toBeTruthy();
  });
});
describe("required with escaped characters", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    required: [
      "foo\nbar",
      'foo"bar',
      "foo\\bar",
      "foo\rbar",
      "foo\tbar",
      "foo\fbar",
    ],
  };
  test("object with all properties present is valid", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate({
        "foo\nbar": 1,
        'foo"bar': 1,
        "foo\\bar": 1,
        "foo\rbar": 1,
        "foo\tbar": 1,
        "foo\fbar": 1,
      }),
    ).toBeTruthy();
  });
  test("object with some properties missing is invalid", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ "foo\nbar": "1", 'foo"bar': "1" })).toBeFalsy();
  });
});
describe("required properties whose names are Javascript object property names", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    required: ["__proto__", "toString", "constructor"],
  };
  test("ignores arrays", () => {
    const instance = new Schema(schema);
    expect(instance.validate([])).toBeTruthy();
  });
  test("ignores other non-objects", () => {
    const instance = new Schema(schema);
    expect(instance.validate(12)).toBeTruthy();
  });
  test("none of the properties mentioned", () => {
    const instance = new Schema(schema);
    expect(instance.validate({})).toBeFalsy();
  });
  test("__proto__ present", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ ["__proto__"]: "foo" })).toBeFalsy();
  });
  test("toString present", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ toString: { length: 37 } })).toBeFalsy();
  });
  test("constructor present", () => {
    const instance = new Schema(schema);
    expect(instance.validate({ constructor: { length: 37 } })).toBeFalsy();
  });
  test("all present", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate({
        ["__proto__"]: 12,
        toString: { length: "foo" },
        constructor: 37,
      }),
    ).toBeTruthy();
  });
});
