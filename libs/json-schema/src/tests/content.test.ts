/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../schema.js";
describe("validation of string-encoded content based on media type", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		contentMediaType: "application/json",
	};
	test("a valid JSON document", () => {
		const instance = new Schema(schema);
		expect(instance.validate('{"foo": "bar"}')).toBeTruthy();
	});
	test("an invalid JSON document; validates true", () => {
		const instance = new Schema(schema);
		expect(instance.validate("{:}")).toBeTruthy();
	});
	test("ignores non-strings", () => {
		const instance = new Schema(schema);
		expect(instance.validate(100)).toBeTruthy();
	});
});
describe("validation of binary string-encoding", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		contentEncoding: "base64",
	};
	test("a valid base64 string", () => {
		const instance = new Schema(schema);
		expect(instance.validate("eyJmb28iOiAiYmFyIn0K")).toBeTruthy();
	});
	test("an invalid base64 string (% is not a valid character); validates true", () => {
		const instance = new Schema(schema);
		expect(instance.validate("eyJmb28iOi%iYmFyIn0K")).toBeTruthy();
	});
	test("ignores non-strings", () => {
		const instance = new Schema(schema);
		expect(instance.validate(100)).toBeTruthy();
	});
});
describe("validation of binary-encoded media type documents", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		contentMediaType: "application/json",
		contentEncoding: "base64",
	};
	test("a valid base64-encoded JSON document", () => {
		const instance = new Schema(schema);
		expect(instance.validate("eyJmb28iOiAiYmFyIn0K")).toBeTruthy();
	});
	test("a validly-encoded invalid JSON document; validates true", () => {
		const instance = new Schema(schema);
		expect(instance.validate("ezp9Cg==")).toBeTruthy();
	});
	test("an invalid base64 string that is valid JSON; validates true", () => {
		const instance = new Schema(schema);
		expect(instance.validate("{}")).toBeTruthy();
	});
	test("ignores non-strings", () => {
		const instance = new Schema(schema);
		expect(instance.validate(100)).toBeTruthy();
	});
});
describe("validation of binary-encoded media type documents with schema", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		contentMediaType: "application/json",
		contentEncoding: "base64",
		contentSchema: {
			type: "object",
			required: ["foo"],
			properties: { foo: { type: "string" } },
		},
	};
	test("a valid base64-encoded JSON document", () => {
		const instance = new Schema(schema);
		expect(instance.validate("eyJmb28iOiAiYmFyIn0K")).toBeTruthy();
	});
	test("another valid base64-encoded JSON document", () => {
		const instance = new Schema(schema);
		expect(
			instance.validate("eyJib28iOiAyMCwgImZvbyI6ICJiYXoifQ=="),
		).toBeTruthy();
	});
	test("an invalid base64-encoded JSON document; validates true", () => {
		const instance = new Schema(schema);
		expect(instance.validate("eyJib28iOiAyMH0=")).toBeTruthy();
	});
	test("an empty object as a base64-encoded JSON document; validates true", () => {
		const instance = new Schema(schema);
		expect(instance.validate("e30=")).toBeTruthy();
	});
	test("an empty array as a base64-encoded JSON document", () => {
		const instance = new Schema(schema);
		expect(instance.validate("W10=")).toBeTruthy();
	});
	test("a validly-encoded invalid JSON document; validates true", () => {
		const instance = new Schema(schema);
		expect(instance.validate("ezp9Cg==")).toBeTruthy();
	});
	test("an invalid base64 string that is valid JSON; validates true", () => {
		const instance = new Schema(schema);
		expect(instance.validate("{}")).toBeTruthy();
	});
	test("ignores non-strings", () => {
		const instance = new Schema(schema);
		expect(instance.validate(100)).toBeTruthy();
	});
});
