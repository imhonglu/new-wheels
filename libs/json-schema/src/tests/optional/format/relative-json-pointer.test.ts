/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../schema.js";
describe("validation of Relative JSON Pointers (RJP)", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		format: "relative-json-pointer",
	};
	test("all string formats ignore integers", () => {
		const instance = new Schema(schema);
		expect(instance.validate(12)).toBeTruthy();
	});
	test("all string formats ignore floats", () => {
		const instance = new Schema(schema);
		expect(instance.validate(13.7)).toBeTruthy();
	});
	test("all string formats ignore objects", () => {
		const instance = new Schema(schema);
		expect(instance.validate({})).toBeTruthy();
	});
	test("all string formats ignore arrays", () => {
		const instance = new Schema(schema);
		expect(instance.validate([])).toBeTruthy();
	});
	test("all string formats ignore booleans", () => {
		const instance = new Schema(schema);
		expect(instance.validate(false)).toBeTruthy();
	});
	test("all string formats ignore nulls", () => {
		const instance = new Schema(schema);
		expect(instance.validate(null)).toBeTruthy();
	});
	test("a valid upwards RJP", () => {
		const instance = new Schema(schema);
		expect(instance.validate("1")).toBeTruthy();
	});
	test("a valid downwards RJP", () => {
		const instance = new Schema(schema);
		expect(instance.validate("0/foo/bar")).toBeTruthy();
	});
	test("a valid up and then down RJP, with array index", () => {
		const instance = new Schema(schema);
		expect(instance.validate("2/0/baz/1/zip")).toBeTruthy();
	});
	test("a valid RJP taking the member or index name", () => {
		const instance = new Schema(schema);
		expect(instance.validate("0#")).toBeTruthy();
	});
	test("an invalid RJP that is a valid JSON Pointer", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/foo/bar")).toBeFalsy();
	});
	test("negative prefix", () => {
		const instance = new Schema(schema);
		expect(instance.validate("-1/foo/bar")).toBeFalsy();
	});
	test("explicit positive prefix", () => {
		const instance = new Schema(schema);
		expect(instance.validate("+1/foo/bar")).toBeFalsy();
	});
	test("## is not a valid json-pointer", () => {
		const instance = new Schema(schema);
		expect(instance.validate("0##")).toBeFalsy();
	});
	test("zero cannot be followed by other digits, plus json-pointer", () => {
		const instance = new Schema(schema);
		expect(instance.validate("01/a")).toBeFalsy();
	});
	test("zero cannot be followed by other digits, plus octothorpe", () => {
		const instance = new Schema(schema);
		expect(instance.validate("01#")).toBeFalsy();
	});
	test("empty string", () => {
		const instance = new Schema(schema);
		expect(instance.validate("")).toBeFalsy();
	});
	test("multi-digit integer prefix", () => {
		const instance = new Schema(schema);
		expect(instance.validate("120/foo/bar")).toBeTruthy();
	});
});
