/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../../../schema.js";
describe("validation of URIs", () => {
  const schema = {
    $schema: "https://json-schema.org/draft/2020-12/schema",
    format: "uri",
  };
  test("all string formats ignore integers", () => {
    const instance = new Schema(schema);
    expect(instance.validate(12)).toBeTruthy();
  });
  test("all string formats ignore floats", () => {
    const instance = new Schema(schema);
    expect(instance.validate(13.7)).toBeTruthy();
  });
  test("all string formats ignore objects", () => {
    const instance = new Schema(schema);
    expect(instance.validate({})).toBeTruthy();
  });
  test("all string formats ignore arrays", () => {
    const instance = new Schema(schema);
    expect(instance.validate([])).toBeTruthy();
  });
  test("all string formats ignore booleans", () => {
    const instance = new Schema(schema);
    expect(instance.validate(false)).toBeTruthy();
  });
  test("all string formats ignore nulls", () => {
    const instance = new Schema(schema);
    expect(instance.validate(null)).toBeTruthy();
  });
  test("a valid URL with anchor tag", () => {
    const instance = new Schema(schema);
    expect(instance.validate("http://foo.bar/?baz=qux#quux")).toBeTruthy();
  });
  test("a valid URL with anchor tag and parentheses", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate("http://foo.com/blah_(wikipedia)_blah#cite-1"),
    ).toBeTruthy();
  });
  test("a valid URL with URL-encoded stuff", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate("http://foo.bar/?q=Test%20URL-encoded%20stuff"),
    ).toBeTruthy();
  });
  test("a valid puny-coded URL ", () => {
    const instance = new Schema(schema);
    expect(instance.validate("http://xn--nw2a.xn--j6w193g/")).toBeTruthy();
  });
  test("a valid URL with many special characters", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate("http://-.~_!$&'()*+,;=:%40:80%2f::::::@example.com"),
    ).toBeTruthy();
  });
  test("a valid URL based on IPv4", () => {
    const instance = new Schema(schema);
    expect(instance.validate("http://223.255.255.254")).toBeTruthy();
  });
  test("a valid URL with ftp scheme", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate("ftp://ftp.is.co.za/rfc/rfc1808.txt"),
    ).toBeTruthy();
  });
  test("a valid URL for a simple text file", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate("http://www.ietf.org/rfc/rfc2396.txt"),
    ).toBeTruthy();
  });
  test("a valid URL ", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate("ldap://[2001:db8::7]/c=GB?objectClass?one"),
    ).toBeTruthy();
  });
  test("a valid mailto URI", () => {
    const instance = new Schema(schema);
    expect(instance.validate("mailto:John.Doe@example.com")).toBeTruthy();
  });
  test("a valid newsgroup URI", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate("news:comp.infosystems.www.servers.unix"),
    ).toBeTruthy();
  });
  test("a valid tel URI", () => {
    const instance = new Schema(schema);
    expect(instance.validate("tel:+1-816-555-1212")).toBeTruthy();
  });
  test("a valid URN", () => {
    const instance = new Schema(schema);
    expect(
      instance.validate("urn:oasis:names:specification:docbook:dtd:xml:4.1.2"),
    ).toBeTruthy();
  });
  test("an invalid protocol-relative URI Reference", () => {
    const instance = new Schema(schema);
    expect(instance.validate("//foo.bar/?baz=qux#quux")).toBeFalsy();
  });
  test("an invalid relative URI Reference", () => {
    const instance = new Schema(schema);
    expect(instance.validate("/abc")).toBeFalsy();
  });
  test("an invalid URI", () => {
    const instance = new Schema(schema);
    expect(instance.validate("\\\\WINDOWS\\fileshare")).toBeFalsy();
  });
  test("an invalid URI though valid URI reference", () => {
    const instance = new Schema(schema);
    expect(instance.validate("abc")).toBeFalsy();
  });
  test("an invalid URI with spaces", () => {
    const instance = new Schema(schema);
    expect(instance.validate("http:// shouldfail.com")).toBeFalsy();
  });
  test("an invalid URI with spaces and missing scheme", () => {
    const instance = new Schema(schema);
    expect(instance.validate(":// should fail")).toBeFalsy();
  });
  test("an invalid URI with comma in scheme", () => {
    const instance = new Schema(schema);
    expect(instance.validate("bar,baz:foo")).toBeFalsy();
  });
});
