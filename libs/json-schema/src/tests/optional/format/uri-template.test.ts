/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../schema.js";
describe("format: uri-template", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		format: "uri-template",
	};
	test("all string formats ignore integers", () => {
		const instance = new Schema(schema);
		expect(instance.validate(12)).toBeTruthy();
	});
	test("all string formats ignore floats", () => {
		const instance = new Schema(schema);
		expect(instance.validate(13.7)).toBeTruthy();
	});
	test("all string formats ignore objects", () => {
		const instance = new Schema(schema);
		expect(instance.validate({})).toBeTruthy();
	});
	test("all string formats ignore arrays", () => {
		const instance = new Schema(schema);
		expect(instance.validate([])).toBeTruthy();
	});
	test("all string formats ignore booleans", () => {
		const instance = new Schema(schema);
		expect(instance.validate(false)).toBeTruthy();
	});
	test("all string formats ignore nulls", () => {
		const instance = new Schema(schema);
		expect(instance.validate(null)).toBeTruthy();
	});
	test("a valid uri-template", () => {
		const instance = new Schema(schema);
		expect(
			instance.validate("http://example.com/dictionary/{term:1}/{term}"),
		).toBeTruthy();
	});
	test("an invalid uri-template", () => {
		const instance = new Schema(schema);
		expect(
			instance.validate("http://example.com/dictionary/{term:1}/{term"),
		).toBeFalsy();
	});
	test("a valid uri-template without variables", () => {
		const instance = new Schema(schema);
		expect(instance.validate("http://example.com/dictionary")).toBeTruthy();
	});
	test("a valid relative uri-template", () => {
		const instance = new Schema(schema);
		expect(instance.validate("dictionary/{term:1}/{term}")).toBeTruthy();
	});
});
