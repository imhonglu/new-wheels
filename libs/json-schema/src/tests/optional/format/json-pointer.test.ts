/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../../../schema.js";
describe("validation of JSON-pointers (JSON String Representation)", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		format: "json-pointer",
	};
	test("all string formats ignore integers", () => {
		const instance = new Schema(schema);
		expect(instance.validate(12)).toBeTruthy();
	});
	test("all string formats ignore floats", () => {
		const instance = new Schema(schema);
		expect(instance.validate(13.7)).toBeTruthy();
	});
	test("all string formats ignore objects", () => {
		const instance = new Schema(schema);
		expect(instance.validate({})).toBeTruthy();
	});
	test("all string formats ignore arrays", () => {
		const instance = new Schema(schema);
		expect(instance.validate([])).toBeTruthy();
	});
	test("all string formats ignore booleans", () => {
		const instance = new Schema(schema);
		expect(instance.validate(false)).toBeTruthy();
	});
	test("all string formats ignore nulls", () => {
		const instance = new Schema(schema);
		expect(instance.validate(null)).toBeTruthy();
	});
	test("a valid JSON-pointer", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/foo/bar~0/baz~1/%a")).toBeTruthy();
	});
	test("not a valid JSON-pointer (~ not escaped)", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/foo/bar~")).toBeFalsy();
	});
	test("valid JSON-pointer with empty segment", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/foo//bar")).toBeTruthy();
	});
	test("valid JSON-pointer with the last empty segment", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/foo/bar/")).toBeTruthy();
	});
	test("valid JSON-pointer as stated in RFC 6901 #1", () => {
		const instance = new Schema(schema);
		expect(instance.validate("")).toBeTruthy();
	});
	test("valid JSON-pointer as stated in RFC 6901 #2", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/foo")).toBeTruthy();
	});
	test("valid JSON-pointer as stated in RFC 6901 #3", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/foo/0")).toBeTruthy();
	});
	test("valid JSON-pointer as stated in RFC 6901 #4", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/")).toBeTruthy();
	});
	test("valid JSON-pointer as stated in RFC 6901 #5", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/a~1b")).toBeTruthy();
	});
	test("valid JSON-pointer as stated in RFC 6901 #6", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/c%d")).toBeTruthy();
	});
	test("valid JSON-pointer as stated in RFC 6901 #7", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/e^f")).toBeTruthy();
	});
	test("valid JSON-pointer as stated in RFC 6901 #8", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/g|h")).toBeTruthy();
	});
	test("valid JSON-pointer as stated in RFC 6901 #9", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/i\\j")).toBeTruthy();
	});
	test("valid JSON-pointer as stated in RFC 6901 #10", () => {
		const instance = new Schema(schema);
		expect(instance.validate('/k"l')).toBeTruthy();
	});
	test("valid JSON-pointer as stated in RFC 6901 #11", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/ ")).toBeTruthy();
	});
	test("valid JSON-pointer as stated in RFC 6901 #12", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/m~0n")).toBeTruthy();
	});
	test("valid JSON-pointer used adding to the last array position", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/foo/-")).toBeTruthy();
	});
	test("valid JSON-pointer (- used as object member name)", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/foo/-/bar")).toBeTruthy();
	});
	test("valid JSON-pointer (multiple escaped characters)", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/~1~0~0~1~1")).toBeTruthy();
	});
	test("valid JSON-pointer (escaped with fraction part) #1", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/~1.1")).toBeTruthy();
	});
	test("valid JSON-pointer (escaped with fraction part) #2", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/~0.1")).toBeTruthy();
	});
	test("not a valid JSON-pointer (URI Fragment Identifier) #1", () => {
		const instance = new Schema(schema);
		expect(instance.validate("#")).toBeFalsy();
	});
	test("not a valid JSON-pointer (URI Fragment Identifier) #2", () => {
		const instance = new Schema(schema);
		expect(instance.validate("#/")).toBeFalsy();
	});
	test("not a valid JSON-pointer (URI Fragment Identifier) #3", () => {
		const instance = new Schema(schema);
		expect(instance.validate("#a")).toBeFalsy();
	});
	test("not a valid JSON-pointer (some escaped, but not all) #1", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/~0~")).toBeFalsy();
	});
	test("not a valid JSON-pointer (some escaped, but not all) #2", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/~0/~")).toBeFalsy();
	});
	test("not a valid JSON-pointer (wrong escape character) #1", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/~2")).toBeFalsy();
	});
	test("not a valid JSON-pointer (wrong escape character) #2", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/~-1")).toBeFalsy();
	});
	test("not a valid JSON-pointer (multiple characters not escaped)", () => {
		const instance = new Schema(schema);
		expect(instance.validate("/~~")).toBeFalsy();
	});
	test("not a valid JSON-pointer (isn't empty nor starts with /) #1", () => {
		const instance = new Schema(schema);
		expect(instance.validate("a")).toBeFalsy();
	});
	test("not a valid JSON-pointer (isn't empty nor starts with /) #2", () => {
		const instance = new Schema(schema);
		expect(instance.validate("0")).toBeFalsy();
	});
	test("not a valid JSON-pointer (isn't empty nor starts with /) #3", () => {
		const instance = new Schema(schema);
		expect(instance.validate("a/a")).toBeFalsy();
	});
});
