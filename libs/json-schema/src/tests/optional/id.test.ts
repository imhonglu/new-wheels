/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../../schema.js";
describe("$id inside an enum is not a real identifier", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		$defs: {
			id_in_enum: {
				enum: [
					{
						$id: "https://localhost:1234/draft2020-12/id/my_identifier.json",
						type: "null",
					},
				],
			},
			real_id_in_schema: {
				$id: "https://localhost:1234/draft2020-12/id/my_identifier.json",
				type: "string",
			},
			zzz_id_in_const: {
				const: {
					$id: "https://localhost:1234/draft2020-12/id/my_identifier.json",
					type: "null",
				},
			},
		},
		anyOf: [
			{ $ref: "#/$defs/id_in_enum" },
			{ $ref: "https://localhost:1234/draft2020-12/id/my_identifier.json" },
		],
	};
	test("exact match to enum, and type matches", () => {
		const instance = new Schema(schema);
		expect(
			instance.validate({
				$id: "https://localhost:1234/draft2020-12/id/my_identifier.json",
				type: "null",
			}),
		).toBeTruthy();
	});
	test("match $ref to $id", () => {
		const instance = new Schema(schema);
		expect(
			instance.validate("a string to match #/$defs/id_in_enum"),
		).toBeTruthy();
	});
	test("no match on enum or $ref to $id", () => {
		const instance = new Schema(schema);
		expect(instance.validate(1)).toBeFalsy();
	});
});
