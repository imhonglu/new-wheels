/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../../schema.js";
describe("reference of a root arbitrary keyword ", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		"unknown-keyword": { type: "integer" },
		properties: { bar: { $ref: "#/unknown-keyword" } },
	};
	test("match", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ bar: 3 })).toBeTruthy();
	});
	test("mismatch", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ bar: true })).toBeFalsy();
	});
});
describe("reference of an arbitrary keyword of a sub-schema", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		properties: {
			foo: { "unknown-keyword": { type: "integer" } },
			bar: { $ref: "#/properties/foo/unknown-keyword" },
		},
	};
	test("match", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ bar: 3 })).toBeTruthy();
	});
	test("mismatch", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ bar: true })).toBeFalsy();
	});
});
describe("reference internals of known non-applicator", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		$id: "/base",
		examples: [{ type: "string" }],
		$ref: "#/examples/0",
	};
	test("match", () => {
		const instance = new Schema(schema);
		expect(instance.validate("a string")).toBeTruthy();
	});
	test("mismatch", () => {
		const instance = new Schema(schema);
		expect(instance.validate(42)).toBeFalsy();
	});
});
