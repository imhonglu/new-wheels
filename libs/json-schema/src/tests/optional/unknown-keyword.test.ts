/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../../schema.js";
describe("$id inside an unknown keyword is not a real identifier", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		$defs: {
			id_in_unknown0: {
				not: {
					array_of_schemas: [
						{
							$id: "https://localhost:1234/draft2020-12/unknownKeyword/my_identifier.json",
							type: "null",
						},
					],
				},
			},
			real_id_in_schema: {
				$id: "https://localhost:1234/draft2020-12/unknownKeyword/my_identifier.json",
				type: "string",
			},
			id_in_unknown1: {
				not: {
					object_of_schemas: {
						foo: {
							$id: "https://localhost:1234/draft2020-12/unknownKeyword/my_identifier.json",
							type: "integer",
						},
					},
				},
			},
		},
		anyOf: [
			{ $ref: "#/$defs/id_in_unknown0" },
			{ $ref: "#/$defs/id_in_unknown1" },
			{
				$ref: "https://localhost:1234/draft2020-12/unknownKeyword/my_identifier.json",
			},
		],
	};
	test("type matches second anyOf, which has a real schema in it", () => {
		const instance = new Schema(schema);
		expect(instance.validate("a string")).toBeTruthy();
	});
	test("type matches non-schema in first anyOf", () => {
		const instance = new Schema(schema);
		expect(instance.validate(null)).toBeFalsy();
	});
	test("type matches non-schema in third anyOf", () => {
		const instance = new Schema(schema);
		expect(instance.validate(1)).toBeFalsy();
	});
});
