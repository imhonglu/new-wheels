/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../schema.js";
describe("oneOf", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		oneOf: [{ type: "integer" }, { minimum: 2 }],
	};
	test("first oneOf valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(1)).toBeTruthy();
	});
	test("second oneOf valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(2.5)).toBeTruthy();
	});
	test("both oneOf valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(3)).toBeFalsy();
	});
	test("neither oneOf valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(1.5)).toBeFalsy();
	});
});
describe("oneOf with base schema", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		type: "string",
		oneOf: [{ minLength: 2 }, { maxLength: 4 }],
	};
	test("mismatch base schema", () => {
		const instance = new Schema(schema);
		expect(instance.validate(3)).toBeFalsy();
	});
	test("one oneOf valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate("foobar")).toBeTruthy();
	});
	test("both oneOf valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate("foo")).toBeFalsy();
	});
});
describe("oneOf with boolean schemas, all true", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		oneOf: [true, true, true],
	};
	test("any value is invalid", () => {
		const instance = new Schema(schema);
		expect(instance.validate("foo")).toBeFalsy();
	});
});
describe("oneOf with boolean schemas, one true", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		oneOf: [true, false, false],
	};
	test("any value is valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate("foo")).toBeTruthy();
	});
});
describe("oneOf with boolean schemas, more than one true", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		oneOf: [true, true, false],
	};
	test("any value is invalid", () => {
		const instance = new Schema(schema);
		expect(instance.validate("foo")).toBeFalsy();
	});
});
describe("oneOf with boolean schemas, all false", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		oneOf: [false, false, false],
	};
	test("any value is invalid", () => {
		const instance = new Schema(schema);
		expect(instance.validate("foo")).toBeFalsy();
	});
});
describe("oneOf complex types", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		oneOf: [
			{ properties: { bar: { type: "integer" } }, required: ["bar"] },
			{ properties: { foo: { type: "string" } }, required: ["foo"] },
		],
	};
	test("first oneOf valid (complex)", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ bar: 2 })).toBeTruthy();
	});
	test("second oneOf valid (complex)", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ foo: "baz" })).toBeTruthy();
	});
	test("both oneOf valid (complex)", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ foo: "baz", bar: 2 })).toBeFalsy();
	});
	test("neither oneOf valid (complex)", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ foo: 2, bar: "quux" })).toBeFalsy();
	});
});
describe("oneOf with empty schema", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		oneOf: [{ type: "number" }, {}],
	};
	test("one valid - valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate("foo")).toBeTruthy();
	});
	test("both valid - invalid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(123)).toBeFalsy();
	});
});
describe("oneOf with required", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		type: "object",
		oneOf: [{ required: ["foo", "bar"] }, { required: ["foo", "baz"] }],
	};
	test("both invalid - invalid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ bar: 2 })).toBeFalsy();
	});
	test("first valid - valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ foo: 1, bar: 2 })).toBeTruthy();
	});
	test("second valid - valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ foo: 1, baz: 3 })).toBeTruthy();
	});
	test("both valid - invalid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ foo: 1, bar: 2, baz: 3 })).toBeFalsy();
	});
});
describe("oneOf with missing optional property", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		oneOf: [
			{ properties: { bar: true, baz: true }, required: ["bar"] },
			{ properties: { foo: true }, required: ["foo"] },
		],
	};
	test("first oneOf valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ bar: 8 })).toBeTruthy();
	});
	test("second oneOf valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ foo: "foo" })).toBeTruthy();
	});
	test("both oneOf valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ foo: "foo", bar: 8 })).toBeFalsy();
	});
	test("neither oneOf valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ baz: "quux" })).toBeFalsy();
	});
});
describe("nested oneOf, to check validation semantics", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		oneOf: [{ oneOf: [{ type: "null" }] }],
	};
	test("null is valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(null)).toBeTruthy();
	});
	test("anything non-null is invalid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(123)).toBeFalsy();
	});
});
