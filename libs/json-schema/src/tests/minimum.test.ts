/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../schema.js";
describe("minimum validation", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		minimum: 1.1,
	};
	test("above the minimum is valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(2.6)).toBeTruthy();
	});
	test("boundary point is valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(1.1)).toBeTruthy();
	});
	test("below the minimum is invalid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(0.6)).toBeFalsy();
	});
	test("ignores non-numbers", () => {
		const instance = new Schema(schema);
		expect(instance.validate("x")).toBeTruthy();
	});
});
describe("minimum validation with signed integer", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		minimum: -2,
	};
	test("negative above the minimum is valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(-1)).toBeTruthy();
	});
	test("positive above the minimum is valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(0)).toBeTruthy();
	});
	test("boundary point is valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(-2)).toBeTruthy();
	});
	test("boundary point with float is valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(-2)).toBeTruthy();
	});
	test("float below the minimum is invalid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(-2.0001)).toBeFalsy();
	});
	test("int below the minimum is invalid", () => {
		const instance = new Schema(schema);
		expect(instance.validate(-3)).toBeFalsy();
	});
	test("ignores non-numbers", () => {
		const instance = new Schema(schema);
		expect(instance.validate("x")).toBeTruthy();
	});
});
