/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../schema.js";
describe("maxContains without contains is ignored", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		maxContains: 1,
	};
	test("one item valid against lone maxContains", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1])).toBeTruthy();
	});
	test("two items still valid against lone maxContains", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1, 2])).toBeTruthy();
	});
});
describe("maxContains with contains", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		contains: { const: 1 },
		maxContains: 1,
	};
	test("empty data", () => {
		const instance = new Schema(schema);
		expect(instance.validate([])).toBeFalsy();
	});
	test("all elements match, valid maxContains", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1])).toBeTruthy();
	});
	test("all elements match, invalid maxContains", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1, 1])).toBeFalsy();
	});
	test("some elements match, valid maxContains", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1, 2])).toBeTruthy();
	});
	test("some elements match, invalid maxContains", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1, 2, 1])).toBeFalsy();
	});
});
describe("maxContains with contains, value with a decimal", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		contains: { const: 1 },
		maxContains: 1,
	};
	test("one element matches, valid maxContains", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1])).toBeTruthy();
	});
	test("too many elements match, invalid maxContains", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1, 1])).toBeFalsy();
	});
});
describe("minContains < maxContains", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		contains: { const: 1 },
		minContains: 1,
		maxContains: 3,
	};
	test("actual < minContains < maxContains", () => {
		const instance = new Schema(schema);
		expect(instance.validate([])).toBeFalsy();
	});
	test("minContains < actual < maxContains", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1, 1])).toBeTruthy();
	});
	test("minContains < maxContains < actual", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1, 1, 1, 1])).toBeFalsy();
	});
});
