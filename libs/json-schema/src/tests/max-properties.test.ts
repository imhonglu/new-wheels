/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../schema.js";
describe("maxProperties validation", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		maxProperties: 2,
	};
	test("shorter is valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ foo: 1 })).toBeTruthy();
	});
	test("exact length is valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ foo: 1, bar: 2 })).toBeTruthy();
	});
	test("too long is invalid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ foo: 1, bar: 2, baz: 3 })).toBeFalsy();
	});
	test("ignores arrays", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1, 2, 3])).toBeTruthy();
	});
	test("ignores strings", () => {
		const instance = new Schema(schema);
		expect(instance.validate("foobar")).toBeTruthy();
	});
	test("ignores other non-objects", () => {
		const instance = new Schema(schema);
		expect(instance.validate(12)).toBeTruthy();
	});
});
describe("maxProperties validation with a decimal", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		maxProperties: 2,
	};
	test("shorter is valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ foo: 1 })).toBeTruthy();
	});
	test("too long is invalid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ foo: 1, bar: 2, baz: 3 })).toBeFalsy();
	});
});
describe("maxProperties = 0 means the object is empty", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		maxProperties: 0,
	};
	test("no properties is valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({})).toBeTruthy();
	});
	test("one property is invalid", () => {
		const instance = new Schema(schema);
		expect(instance.validate({ foo: 1 })).toBeFalsy();
	});
});
