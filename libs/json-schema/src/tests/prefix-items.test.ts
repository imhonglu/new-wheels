/* This file is automatically generated. Do not edit this file. */
import { describe, expect, test } from "vitest";
import { Schema } from "../schema.js";
describe("a schema given for prefixItems", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		prefixItems: [{ type: "integer" }, { type: "string" }],
	};
	test("correct types", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1, "foo"])).toBeTruthy();
	});
	test("wrong types", () => {
		const instance = new Schema(schema);
		expect(instance.validate(["foo", 1])).toBeFalsy();
	});
	test("incomplete array of items", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1])).toBeTruthy();
	});
	test("array with additional items", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1, "foo", true])).toBeTruthy();
	});
	test("empty array", () => {
		const instance = new Schema(schema);
		expect(instance.validate([])).toBeTruthy();
	});
	test("JavaScript pseudo-array is valid", () => {
		const instance = new Schema(schema);
		expect(
			instance.validate({ "0": "invalid", "1": "valid", length: 2 }),
		).toBeTruthy();
	});
});
describe("prefixItems with boolean schemas", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		prefixItems: [true, false],
	};
	test("array with one item is valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1])).toBeTruthy();
	});
	test("array with two items is invalid", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1, "foo"])).toBeFalsy();
	});
	test("empty array is valid", () => {
		const instance = new Schema(schema);
		expect(instance.validate([])).toBeTruthy();
	});
});
describe("additional items are allowed by default", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		prefixItems: [{ type: "integer" }],
	};
	test("only the first item is validated", () => {
		const instance = new Schema(schema);
		expect(instance.validate([1, "foo", false])).toBeTruthy();
	});
});
describe("prefixItems with null instance elements", () => {
	const schema = {
		$schema: "https://json-schema.org/draft/2020-12/schema",
		prefixItems: [{ type: "null" }],
	};
	test("allows null elements", () => {
		const instance = new Schema(schema);
		expect(instance.validate([null])).toBeTruthy();
	});
});
